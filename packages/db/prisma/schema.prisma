// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String          @id @default(cuid())
  fullName              String
  email                 String          @unique
  bio                   String          @default("")
  gamertag              String?
  playerRole            PlayerRole[]
  experienceLevel       ExperienceLevel[]
  games                 Game[]
  region                Region[]
  team                  TeamMember[]      
  ownedTeam             Team[]     @relation("TeamOwner")
  videos                VideoClip[]
  gamesPlayed           UserGame[]
  sentInvitation        TeamInvitation[]    @relation("SentInvitations")
  receivedInvites       TeamInvitation[]    @relation("ReceivedInvitations")


  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
}

model Game {
  id        String      @id @default(cuid())
  name      String      @unique
  players   User[]
  teams     Team[]
  videos    VideoClip[]
  userGames UserGame[]
  teamGames TeamGame[]
}

model UserGame {
  id        String        @id @default(cuid())
  userId    String
  gameId    String
  experiece ExperienceLevel
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  game      Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([ userId, gameId ])
}


model TeamGame {
  id        String        @id @default(cuid())
  teamId    String
  gameId    String
  experiece ExperienceLevel
  team      Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  game      Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([ teamId, gameId ])
}

model Team {
  id            String        @id @default(cuid())
  name          String        
  description   String      @default("")
  logoUrl       String?
  isRecruiting  Boolean     @default(false)
  games         Game[]
  region        Region?
  members       TeamMember[]
  ownerId       String
  owner         User        @relation("TeamOwner", fields: [ownerId], references: [id])
  invitation    TeamInvitation[]
  gamesPlayed   TeamGame[]
  createdAt     DateTime
  updatedAt     DateTime    @updatedAt
}

model TeamMember {
  id          String        @id @default(cuid())
  role        TeamMemberRole
  joinedAt    DateTime      @default(now())
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  teamId      String
  team        Team          @relation(fields: [teamId], references: [id])
  
  @@unique([userId, teamId])
}


model TeamInvitation {
  id          String        @id @default(cuid())
  teamId      String
  senderId    String
  receiverId  String
  status      InvitationStatus    @default(PENDING)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt  

  teams       Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  sender      User      @relation("SentInvitations", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User      @relation("ReceivedInvitations", fields: [receiverId], references: [id], onDelete: Cascade)
}

model VideoClip {
  id              String            @id @default(cuid())
  title           String
  description     String?           @default("")
  videoUrl        String
  thumbnailUrl    String?
  userId          String
  gameId          String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  game            Game    @relation(fields: [gameId], references: [id])
  likes           Like[]
  comments        Comment[]
}

model Like {
  id        String      @id @default(cuid())
  videoId   String  
  userId    String
  createdAt DateTime    @default(now())
  video     VideoClip   @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([ videoId, userId ])
}

model Comment {
  id        String        @id @default(cuid())
  content   String        @default("")
  videoId   String
  userId    String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  video     VideoClip     @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum TeamMemberRole {
  Owner
  Captain
  Member
}

enum PlayerRole {
  Assaulter
  Sniper
  Leader
  All_rounder
}

enum ExperienceLevel {
  Beginner
  Intermediate
  Advanced
  Professional
}

enum Region {
  North_America
  Asia
  Europe
}

enum AuthType {
  Google
}